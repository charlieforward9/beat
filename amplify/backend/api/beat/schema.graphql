enum CategoryTypes {
  FITNESS
  FUEL
  PRODUCTIVITY
  SOCIAL
  REST
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  userEmail: AWSEmail!
  userName: String!
  userPassword: String!
  userGoals: [Goal] @hasMany(indexName: "byUser", fields: ["id"])
  userFirstName: String!
  userLastName: String!
  userGender: GenderTypes!
  userBirthDate: AWSDate!
  userAvatar: String!
  userIntegrations: Integrations @hasOne
}

type Goal @model @auth(rules: [{allow: public}]) {
  id: ID!
  utcDate: AWSDate!
  localDate: String!
  goalCategory: CategoryTypes!
  goalCurrentDuration: DurationBeat!
  goalTargetDuration: DurationBeat!
  goalPercentage: Float
  howToGetU: ID! @index(name: "byUser")
  goalActivities: [Activity] @hasMany(indexName: "byGoal", fields: ["id"])
  goalOfUser: User @belongsTo
}

type Activity @model @auth(rules: [{allow: public}]) {
  id: ID!
  utcStart: AWSDateTime!
  localStart: String!
  activtyCategory: CategoryTypes!
  activityDuration: DurationBeat!
  howToGetG: ID! @index(name: "byGoal")
  activityMetrics: [Metric] @manyToMany(relationName: "ActivityMetric")
  activityOfGoal: Goal @belongsTo
}

type Metric @model @auth(rules: [{allow: public}]) {
  id: ID!
  utcDateTime: AWSDateTime!
  localDateTime: String!
  metricLocation: String
  activities: [Activity] @manyToMany(relationName: "ActivityMetric")
  metricHeartRate: Int
}

type Integrations @model @auth(rules: [{allow: public}]) {
  id: ID!
  wf_public_id: String!
  wf_profile_bearer: String!
}

type DurationBeat {
  durationSeconds: Int
  durationMinutes: Int
  durationHours: Int
}

enum GenderTypes {
  M
  F
  X
}
 